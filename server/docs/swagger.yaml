basePath: /
definitions:
  dtos.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - email
    - id
    - name
    type: object
  dtos.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  dtos.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dtos.UsersListResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@teammate.com
    name: API Support
    url: http://www.teammate.com/support
  description: A REST API for the Teammate application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Teammate API
  version: "1.0"
paths:
  /auth/exchange-token:
    post:
      consumes:
      - application/json
      description: Provides instructions on how to exchange a custom token for an
        ID token
      parameters:
      - description: Custom token to exchange
        in: body
        name: token
        required: true
        schema:
          properties:
            customToken:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Exchange custom token for ID token
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email
      parameters:
      - description: User email
        in: body
        name: forgot
        required: true
        schema:
          properties:
            email:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Forgot password
      tags:
      - auth
  /auth/get-id-token:
    post:
      consumes:
      - application/json
      description: Exchange a custom token for an ID token using Firebase REST API.
        Use this for Swagger UI testing.
      parameters:
      - description: Custom token to exchange
        in: body
        name: token
        required: true
        schema:
          properties:
            customToken:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              expiresIn:
                type: string
              idToken:
                type: string
              message:
                type: string
              refreshToken:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Exchange custom token for ID token (for testing)
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate session
      parameters:
      - description: Firebase ID token to invalidate
        in: body
        name: logout
        required: true
        schema:
          properties:
            idToken:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired Firebase ID token
      parameters:
      - description: Firebase refresh token
        in: body
        name: refresh
        required: true
        schema:
          properties:
            refreshToken:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              expiresAt:
                type: string
              token:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Firebase token
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Confirm password reset with code
      parameters:
      - description: Reset code and new password
        in: body
        name: reset
        required: true
        schema:
          properties:
            newPassword:
              type: string
            oobCode:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset password
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email with verification code
      parameters:
      - description: Email verification code
        in: body
        name: verify
        required: true
        schema:
          properties:
            oobCode:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify email
      tags:
      - auth
  /debug/firebase:
    get:
      consumes:
      - application/json
      description: Get Firebase project information for debugging
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Debug Firebase configuration
      tags:
      - debug
  /login:
    post:
      consumes:
      - application/json
      description: Verify Firebase ID token and return user information
      parameters:
      - description: Firebase ID token
        in: body
        name: login
        required: true
        schema:
          properties:
            idToken:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              token:
                type: string
              user:
                $ref: '#/definitions/dtos.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login with Firebase ID token
      tags:
      - auth
  /login/email:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password. Returns both custom
        token and simulated ID token for testing.
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              customToken:
                type: string
              idToken:
                type: string
              instructions:
                type: string
              user:
                $ref: '#/definitions/dtos.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login with email and password
      tags:
      - auth
  /login/email/direct:
    post:
      consumes:
      - application/json
      description: Authenticate user and return an ID token directly. This simulates
        the complete Firebase flow for testing purposes.
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              idToken:
                type: string
              message:
                type: string
              user:
                $ref: '#/definitions/dtos.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login with email/password and get ID token directly
      tags:
      - auth
  /me:
    get:
      consumes:
      - application/json
      description: Get the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system (for existing Firebase users)
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user with email and password in Firebase Auth and
        local database
      parameters:
      - description: Signup information
        in: body
        name: signup
        required: true
        schema:
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Sign up a new user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UsersListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the Firebase ID token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
